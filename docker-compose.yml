version: '3.8'

services:
  # DuckDB Data Volume (File-based analytical database)
  duckdb-data:
    image: alpine:latest
    volumes:
      - duckdb_data:/data
    command: "true"

  # Redis Cache & LangGraph State Store
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DUCKDB_PATH=/app/data/audit_data.duckdb
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=development
      - SECRET_KEY=your-secret-key-here
      - GROQ_API_KEY=${GROQ_API_KEY}
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=financial-audit-backend
      - SERVICE_VERSION=1.0.0
    depends_on:
      redis:
        condition: service_healthy
      otel-collector:
        condition: service_started
    volumes:
      - ./backend:/app/backend
      - ./agents:/app/agents
      - ./ml:/app/ml
      - ./config:/app/config
      - ./security:/app/security
      - duckdb_data:/app/data
    command: uvicorn backend.main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend

  # ML Training Service
  ml-trainer:
    build:
      context: .
      dockerfile: ml/Dockerfile
    environment:
      - DUCKDB_PATH=/app/data/ml_audit_data.duckdb
      - REDIS_URL=redis://redis:6379
    depends_on:
      redis:
        condition: service_healthy
      duckdb-data:
        condition: service_completed_successfully
    volumes:
      - ./ml:/app/ml
      - ./backend:/app/backend
      - ml_models:/app/models
    command: python -m ml.training.trainer

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.91.0
    command: ["--config=/etc/otel-collector.yml"]
    volumes:
      - ./config/otel/otel-collector.yml:/etc/otel-collector.yml
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - otel_logs:/var/log/otel
    ports:
      - "4317:4317"    # OTLP gRPC receiver
      - "4318:4318"    # OTLP HTTP receiver
      - "8889:8889"    # Prometheus metrics
      - "13133:13133"  # Health check
      - "55679:55679"  # zPages
    environment:
      - EXTERNAL_OTLP_ENDPOINT=${EXTERNAL_OTLP_ENDPOINT:-}
      - EXTERNAL_API_KEY=${EXTERNAL_API_KEY:-}
    depends_on:
      - jaeger

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.52
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector
      - "14250:14250"  # Jaeger gRPC
    environment:
      - COLLECTOR_OTLP_ENABLED=true

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.48.0
    ports:
      - "9090:9090"
    volumes:
      - ./config/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:10.2.0
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus

  # NGINX Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend

  # MinIO Object Storage
  minio:
    image: minio/minio:RELEASE.2023-12-02T10-51-33Z
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Elasticsearch for Audit Logs
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.1
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch

  # Vault for Secrets Management
  vault:
    image: vault:1.15.2
    ports:
      - "8200:8200"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=myroot
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_data:/vault/data

volumes:
  duckdb_data:
  redis_data:
  ml_models:
  prometheus_data:
  grafana_data:
  minio_data:
  elasticsearch_data:
  vault_data:
  otel_logs:

networks:
  default:
    name: financial-audit-network