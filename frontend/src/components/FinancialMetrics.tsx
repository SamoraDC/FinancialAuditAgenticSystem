'use client'

import { useState } from 'react'
import { useQuery } from 'react-query'
import {\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell\n} from 'recharts'\nimport {\n  CurrencyDollarIcon,\n  TrendingUpIcon,\n  TrendingDownIcon,\n  ChartBarIcon,\n  InformationCircleIcon\n} from '@heroicons/react/24/outline'\nimport { auditApi, FinancialMetrics as FinancialMetricsType } from '../lib/api'\n\ninterface FinancialMetricsProps {\n  auditId: string\n  className?: string\n}\n\ninterface MetricCard {\n  label: string\n  value: number\n  format: 'currency' | 'percentage' | 'ratio'\n  trend?: 'up' | 'down' | 'neutral'\n  trendValue?: number\n  description: string\n  category: 'profitability' | 'liquidity' | 'efficiency' | 'leverage'\n}\n\nconst COLORS = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6', '#F97316']\n\nconst mockHistoricalData = [\n  { period: 'Q1 2023', revenue: 1200000, expenses: 980000, netIncome: 220000 },\n  { period: 'Q2 2023', revenue: 1350000, expenses: 1050000, netIncome: 300000 },\n  { period: 'Q3 2023', revenue: 1280000, expenses: 1020000, netIncome: 260000 },\n  { period: 'Q4 2023', revenue: 1450000, expenses: 1150000, netIncome: 300000 },\n  { period: 'Q1 2024', revenue: 1520000, expenses: 1200000, netIncome: 320000 }\n]\n\nexport default function FinancialMetrics({ auditId, className = '' }: FinancialMetricsProps) {\n  const [selectedView, setSelectedView] = useState<'overview' | 'trends' | 'ratios'>('overview')\n  const [selectedCategory, setSelectedCategory] = useState<string>('all')\n\n  const { data: metrics, isLoading, error } = useQuery<FinancialMetricsType>(\n    ['financial-metrics', auditId],\n    () => auditApi.getFinancialMetrics(auditId),\n    {\n      refetchInterval: 10000, // Refresh every 10 seconds\n    }\n  )\n\n  if (isLoading) {\n    return (\n      <div className={`animate-pulse ${className}`}>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(6)].map((_, i) => (\n            <div key={i} className=\"bg-gray-200 h-32 rounded-lg\" />\n          ))}\n        </div>\n      </div>\n    )\n  }\n\n  if (error || !metrics) {\n    return (\n      <div className={`text-center py-8 ${className}`}>\n        <ChartBarIcon className=\"mx-auto h-12 w-12 text-gray-400\" />\n        <h3 className=\"mt-2 text-sm font-medium text-gray-900\">\n          No financial data available\n        </h3>\n        <p className=\"mt-1 text-sm text-gray-500\">\n          Financial metrics will appear once the audit analysis is complete.\n        </p>\n      </div>\n    )\n  }\n\n  const metricCards: MetricCard[] = [\n    {\n      label: 'Revenue',\n      value: metrics.revenue,\n      format: 'currency',\n      trend: 'up',\n      trendValue: 8.5,\n      description: 'Total revenue for the period',\n      category: 'profitability'\n    },\n    {\n      label: 'Net Income',\n      value: metrics.net_income,\n      format: 'currency',\n      trend: metrics.net_income > 0 ? 'up' : 'down',\n      trendValue: 12.3,\n      description: 'Net profit after all expenses',\n      category: 'profitability'\n    },\n    {\n      label: 'Gross Margin',\n      value: metrics.gross_margin,\n      format: 'percentage',\n      trend: 'up',\n      trendValue: 2.1,\n      description: 'Gross profit as percentage of revenue',\n      category: 'profitability'\n    },\n    {\n      label: 'Operating Margin',\n      value: metrics.operating_margin,\n      format: 'percentage',\n      trend: 'neutral',\n      trendValue: 0.5,\n      description: 'Operating income as percentage of revenue',\n      category: 'profitability'\n    },\n    {\n      label: 'Current Ratio',\n      value: metrics.current_ratio,\n      format: 'ratio',\n      trend: metrics.current_ratio > 1 ? 'up' : 'down',\n      trendValue: 5.2,\n      description: 'Current assets divided by current liabilities',\n      category: 'liquidity'\n    },\n    {\n      label: 'Quick Ratio',\n      value: metrics.quick_ratio,\n      format: 'ratio',\n      trend: metrics.quick_ratio > 1 ? 'up' : 'down',\n      trendValue: 3.8,\n      description: 'Quick assets divided by current liabilities',\n      category: 'liquidity'\n    },\n    {\n      label: 'Debt-to-Equity',\n      value: metrics.debt_to_equity,\n      format: 'ratio',\n      trend: metrics.debt_to_equity < 1 ? 'up' : 'down',\n      trendValue: -2.3,\n      description: 'Total debt divided by total equity',\n      category: 'leverage'\n    },\n    {\n      label: 'ROE',\n      value: metrics.return_on_equity,\n      format: 'percentage',\n      trend: 'up',\n      trendValue: 4.7,\n      description: 'Return on equity',\n      category: 'efficiency'\n    },\n    {\n      label: 'ROA',\n      value: metrics.return_on_assets,\n      format: 'percentage',\n      trend: 'up',\n      trendValue: 3.2,\n      description: 'Return on assets',\n      category: 'efficiency'\n    }\n  ]\n\n  const formatValue = (value: number, format: MetricCard['format']) => {\n    switch (format) {\n      case 'currency':\n        return new Intl.NumberFormat('en-US', {\n          style: 'currency',\n          currency: 'USD',\n          minimumFractionDigits: 0,\n          maximumFractionDigits: 0\n        }).format(value)\n      case 'percentage':\n        return `${(value * 100).toFixed(1)}%`\n      case 'ratio':\n        return value.toFixed(2)\n      default:\n        return value.toString()\n    }\n  }\n\n  const getTrendIcon = (trend: MetricCard['trend']) => {\n    switch (trend) {\n      case 'up':\n        return <TrendingUpIcon className=\"h-4 w-4 text-green-500\" />\n      case 'down':\n        return <TrendingDownIcon className=\"h-4 w-4 text-red-500\" />\n      default:\n        return null\n    }\n  }\n\n  const getTrendColor = (trend: MetricCard['trend']) => {\n    switch (trend) {\n      case 'up':\n        return 'text-green-600'\n      case 'down':\n        return 'text-red-600'\n      default:\n        return 'text-gray-600'\n    }\n  }\n\n  const filteredMetrics = selectedCategory === 'all' \n    ? metricCards \n    : metricCards.filter(metric => metric.category === selectedCategory)\n\n  const pieChartData = [\n    { name: 'Revenue', value: metrics.revenue, color: COLORS[0] },\n    { name: 'Expenses', value: metrics.expenses, color: COLORS[3] },\n    { name: 'Net Income', value: metrics.net_income, color: COLORS[1] }\n  ]\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Header with view controls */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center space-y-4 sm:space-y-0\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Financial Metrics</h2>\n          <p className=\"text-sm text-gray-600 mt-1\">\n            Key financial indicators and performance metrics\n          </p>\n        </div>\n\n        <div className=\"flex space-x-2\">\n          <select\n            value={selectedView}\n            onChange={(e) => setSelectedView(e.target.value as any)}\n            className=\"input-field text-sm\"\n          >\n            <option value=\"overview\">Overview</option>\n            <option value=\"trends\">Trends</option>\n            <option value=\"ratios\">Ratios</option>\n          </select>\n\n          <select\n            value={selectedCategory}\n            onChange={(e) => setSelectedCategory(e.target.value)}\n            className=\"input-field text-sm\"\n          >\n            <option value=\"all\">All Categories</option>\n            <option value=\"profitability\">Profitability</option>\n            <option value=\"liquidity\">Liquidity</option>\n            <option value=\"efficiency\">Efficiency</option>\n            <option value=\"leverage\">Leverage</option>\n          </select>\n        </div>\n      </div>\n\n      {selectedView === 'overview' && (\n        <>\n          {/* Metric cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredMetrics.map((metric, index) => (\n              <div key={metric.label} className=\"card hover:shadow-lg transition-shadow\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h3 className=\"text-sm font-medium text-gray-600 uppercase tracking-wide\">\n                    {metric.label}\n                  </h3>\n                  <div className=\"group relative\">\n                    <InformationCircleIcon className=\"h-4 w-4 text-gray-400 cursor-help\" />\n                    <div className=\"absolute bottom-full right-0 mb-2 hidden group-hover:block w-48 p-2 bg-gray-900 text-white text-xs rounded shadow-lg z-10\">\n                      {metric.description}\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-baseline justify-between\">\n                  <div>\n                    <p className=\"text-2xl font-bold text-gray-900\">\n                      {formatValue(metric.value, metric.format)}\n                    </p>\n                    {metric.trendValue && (\n                      <div className={`flex items-center mt-1 text-sm ${getTrendColor(metric.trend)}`}>\n                        {getTrendIcon(metric.trend)}\n                        <span className=\"ml-1\">\n                          {metric.trend === 'up' ? '+' : ''}{metric.trendValue}%\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                  \n                  <div className={`\n                    w-16 h-16 rounded-full flex items-center justify-center\n                    ${metric.category === 'profitability' ? 'bg-blue-100' :\n                      metric.category === 'liquidity' ? 'bg-green-100' :\n                      metric.category === 'efficiency' ? 'bg-yellow-100' :\n                      'bg-purple-100'}\n                  `}>\n                    <CurrencyDollarIcon className={`\n                      h-8 w-8\n                      ${metric.category === 'profitability' ? 'text-blue-600' :\n                        metric.category === 'liquidity' ? 'text-green-600' :\n                        metric.category === 'efficiency' ? 'text-yellow-600' :\n                        'text-purple-600'}\n                    `} />\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {/* Charts */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Revenue vs Expenses Pie Chart */}\n            <div className=\"card\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n                Revenue Breakdown\n              </h3>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <PieChart>\n                  <Pie\n                    dataKey=\"value\"\n                    data={pieChartData.filter(item => item.value > 0)}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    outerRadius={100}\n                    fill=\"#8884d8\"\n                    label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                  >\n                    {pieChartData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.color} />\n                    ))}\n                  </Pie>\n                  <Tooltip formatter={(value) => formatValue(value as number, 'currency')} />\n                </PieChart>\n              </ResponsiveContainer>\n            </div>\n\n            {/* Financial Ratios Chart */}\n            <div className=\"card\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n                Key Financial Ratios\n              </h3>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart\n                  data={[\n                    { name: 'Current Ratio', value: metrics.current_ratio, target: 2.0 },\n                    { name: 'Quick Ratio', value: metrics.quick_ratio, target: 1.0 },\n                    { name: 'D/E Ratio', value: metrics.debt_to_equity, target: 0.5 },\n                    { name: 'ROE', value: metrics.return_on_equity * 100, target: 15 },\n                    { name: 'ROA', value: metrics.return_on_assets * 100, target: 10 }\n                  ]}\n                >\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"name\" />\n                  <YAxis />\n                  <Tooltip formatter={(value) => [value.toFixed(2), 'Value']} />\n                  <Legend />\n                  <Bar dataKey=\"value\" fill=\"#3B82F6\" name=\"Actual\" />\n                  <Bar dataKey=\"target\" fill=\"#E5E7EB\" name=\"Target\" />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n        </>\n      )}\n\n      {selectedView === 'trends' && (\n        <div className=\"card\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n            Financial Trends\n          </h3>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <LineChart data={mockHistoricalData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"period\" />\n              <YAxis />\n              <Tooltip formatter={(value) => formatValue(value as number, 'currency')} />\n              <Legend />\n              <Line \n                type=\"monotone\" \n                dataKey=\"revenue\" \n                stroke=\"#3B82F6\" \n                strokeWidth={2}\n                name=\"Revenue\"\n              />\n              <Line \n                type=\"monotone\" \n                dataKey=\"expenses\" \n                stroke=\"#EF4444\" \n                strokeWidth={2}\n                name=\"Expenses\"\n              />\n              <Line \n                type=\"monotone\" \n                dataKey=\"netIncome\" \n                stroke=\"#10B981\" \n                strokeWidth={2}\n                name=\"Net Income\"\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n      )}\n\n      {selectedView === 'ratios' && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <div className=\"card\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n              Liquidity Ratios\n            </h3>\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm font-medium text-gray-600\">Current Ratio</span>\n                <span className=\"text-lg font-semibold\">{metrics.current_ratio.toFixed(2)}</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm font-medium text-gray-600\">Quick Ratio</span>\n                <span className=\"text-lg font-semibold\">{metrics.quick_ratio.toFixed(2)}</span>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"card\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n              Profitability Ratios\n            </h3>\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm font-medium text-gray-600\">Gross Margin</span>\n                <span className=\"text-lg font-semibold\">{formatValue(metrics.gross_margin, 'percentage')}</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm font-medium text-gray-600\">Operating Margin</span>\n                <span className=\"text-lg font-semibold\">{formatValue(metrics.operating_margin, 'percentage')}</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm font-medium text-gray-600\">ROE</span>\n                <span className=\"text-lg font-semibold\">{formatValue(metrics.return_on_equity, 'percentage')}</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm font-medium text-gray-600\">ROA</span>\n                <span className=\"text-lg font-semibold\">{formatValue(metrics.return_on_assets, 'percentage')}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}